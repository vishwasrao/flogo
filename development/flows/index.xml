<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flows on Project Flogo - Docs and Tutorials</title>
    <link>https://tibcosoftware.github.io/flogo/development/flows/</link>
    <description>Recent content in Flows on Project Flogo - Docs and Tutorials</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://tibcosoftware.github.io/flogo/development/flows/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>App Properties</title>
      <link>https://tibcosoftware.github.io/flogo/development/flows/property-bag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/development/flows/property-bag/</guid>
      <description>In Flogo, the concept of an application-level property bag is made available to flow developers that want to reuse properties across different flows, within the same application for trigger settings or as input to activities. Properties are exposed via the $property resolver and made available to the scopes defined in the mappings documentation.
Flow configuration Properties are defined within the root of the application json, as shown below via the properties element.</description>
    </item>
    
    <item>
      <title>Flow Input/Output Params</title>
      <link>https://tibcosoftware.github.io/flogo/development/flows/io-parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/development/flows/io-parameters/</guid>
      <description>For Flogo a Flow is more inline with the concept of a function, that is, a Flow has both input and output parameters. The concept of decoupling a trigger from a flow is a key part of supporting multiple triggers and re-use/sharing of a flow. A Flow can now operate against the data that it has defined within its declartion, it otherwords, just like a function, the scope of data that a Flow can operate against must reside within either the Flow context (or as an environment variable).</description>
    </item>
    
    <item>
      <title>Iterator</title>
      <link>https://tibcosoftware.github.io/flogo/development/flows/iterators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/development/flows/iterators/</guid>
      <description>What is an iterator in Flogo? The iterator construct in Flogo enables the iteration of a single activity. The configuration elements are associated with that activity. In Flogo, you can iterate only over a single activity. The iterator acts much like a for loop in any procedural language.
Flow configuration Iterators are associated with an activity. The activity type must be defined as a type 2, which indicates that it is to be iterated over.</description>
    </item>
    
    <item>
      <title>Mappings</title>
      <link>https://tibcosoftware.github.io/flogo/development/flows/mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/flogo/development/flows/mapping/</guid>
      <description>What are mappings? A mapping in a Flogo Flow can be used to assign the value of a variable to that of an input parameters of an activity or to the value of another flow scoped variable.
Types of mappings If you peak under the covers, you&amp;rsquo;ll note that we have a number of different mapping types supported in the Flogo engine. These include:
   Type Description     assign Direct mapping.</description>
    </item>
    
  </channel>
</rss>